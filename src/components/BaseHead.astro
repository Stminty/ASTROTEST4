---
// Import the global.css file here so that it is included on
// all pages through the use of the <BaseHead /> component.
import '../styles/global.css';

interface Props {
	title: string;
	description: string;
	image?: string;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const { title, description, image = '/blog-placeholder-1.jpg' } = Astro.props;
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
<meta name="generator" content={Astro.generator} />

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={new URL(image, Astro.url)} />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={new URL(image, Astro.url)} />

<!-- Dark mode favicon script -->
<script is:inline>
    function updateFavicon() {
        const favicon = document.querySelector('link[rel="icon"]');
        if (document.documentElement.classList.contains('dark')) {
            // Update the favicon's fill color to white in dark mode
            fetch(favicon.href)
                .then(response => response.text())
                .then(data => {
                    const whiteFavicon = data.replace(/fill="currentColor"/g, 'fill="white"');
                    const blob = new Blob([whiteFavicon], { type: 'image/svg+xml' });
                    favicon.href = URL.createObjectURL(blob);
                });
        } else {
            // Reset to default favicon
            favicon.href = '/favicon.svg';
        }
    }

    // Update favicon when dark mode changes
    new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
            if (mutation.attributeName === 'class') {
                updateFavicon();
            }
        });
    }).observe(document.documentElement, { attributes: true });

    // Initial favicon update
    updateFavicon();
</script>